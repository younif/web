非阻塞编程知识总结

传输文件与零拷贝：
零拷贝优化是指数据在硬盘、用户态内存、内核态内存、网卡之间的数据拷贝优化，主要是基于内存映射来减少拷贝。
HTTP的get方法就是将网页文件传输给客户端。但是网页文件一般很短，建立的是TCP短链接。
大文件传输时，如果一次性将文件读入内存，则对内存消耗过大。我们可以为链接设置上下文，记录传输的位置，并在可写时一段一段读取然后传输。
但是这些方式都需要从硬盘读入用户态内存，然后载总用户太内存拷贝至内核，最后通过驱动发送到网卡中。
一种方式是可以使用mmap调用直接将文件映射到内存中，这样就可以减少一步拷贝。
也可以使用sendfile调用


TCP分包与序列化：
TCP是将链接通信抽象为双向的无限字节流，所以数据之间没有边界，而现实情况书我们需要从中截取出带有结构的数据。所以这就是TCP的分包需求来源。
序列化是因为带有结构的数据在不同的系统平台上的表示是不同的。比如大小端在不同的操作系统和不同指令集的架构下会有不同，不同的编程语言对数据的格式表达会有不同。
序列化是将带有结构的数据“拉成“一长串没有结构的数据字符流，反序列化相反。
最简单的序列化方式是，只考虑数据的大小，即在数据前标记数据的长度。通过这样的方式我们只要在另一端先读取长度信息，在读取固定长度的信息即可得到该长度的字符串。

并发与内存一致性：



HTTP1.0主要延时
    1. DNS解析时延（如果没有缓存）-->由URI确定IP与端口号
    2. TCP三次握手连接建立时延 -->使用TCP协议的必须开销
    3. 服务器接收请求并响应报文时延
TCP对HTTP的影响与应对策略
    1. TCP建立的时延--keepalive持久连接，减少建立次数
    2. 慢启动拥塞控制--keepalive持久连接，避开建立时的慢启动
    3. Nagle算法 --设置TCP_NODELAY（HTTP请求应答模式不搭配 ）
    4. TIME_WAIT积累端口耗尽（服务端主动关闭） -- 性能测试用，设置reuseaddr
    5. TCP队头堵塞 --弱网环境下（丢包率高），堵塞会严重

注意事项：
多线程避免伪共享--CacheLine大小内的读写引起的缓存失效